description <http://opencaesar.io/examples/firesat_fun/descriptions/firesat#> as firesat {
	uses <http://opencaesar.io/examples/firesat_fun/vocabularies/space#> as space

	uses <http://imce.jpl.nasa.gov/foundation/base#> as base
	
	uses <http://imce.jpl.nasa.gov/foundation/mission#> as mission
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////Created a fireSAT specific-instance of space craft (name firesat)://////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	//todo
	//emissions is collect-and-downlink-data (the input) NEED TO CHAGNE TO CONVETIONAL (WAIT, I HAVE TO GUESS GOOD NAMES FOR THEM 

	//Notes:
	//Relationship between spacecraft and subsystem.
	//To define input and output pins use hasInput and hasOutput to relate func to pin
	//relation instance: with a capital H: space:HasDataFlowTo  this makes it solid
	//Instance of subsystem is declared by adding " : space:Subsystem" after the concept instance (ci)
	//To add relations to the system:
		//Aggregate assemblies to the subsystem. This communicates relation between subsystems, 
		//which are like sub components. This is a logical composition, not physical, 
		//it is what they are contained in.
		//Square brackets represent links, for example payload subsystem consisting of assemblies
		//Round rectangle functions inside assemblies
	//A component performs function (functions are the round rectangles and the larger activities)
	//refi (to make it real, an object, instead of just a relationship, represented by an object)
	//wire //relation instance: with a capital H: space:HasDataFlowTo  this makes it solid
	//A function has pins, each pin can have a type
	//if you connect 2 pins, the types have to be the same or a subclass of the pin
	
	ci firesat : space:Spacecraft [
		//collect and down-link observation data assemblies (physical only)
		base:contains payload-sensor
		base:contains signal-processor
		base:contains payload-sw		
		
		//control attitude assemblies (physical only)
		base:contains horizon-tracker
		base:contains sun-tracker
		base:contains inertial-measurement-unit
		base:contains gnc-sw
		base:contains reaction-wheel	
	
		//provide electrical power assemblies (physical only)
		base:contains solar-array
		base:contains battery
		base:contains power-mgmt-sw
		base:contains power-conditioner
		base:contains power-distribution
		
		// under payload-sensor
		mission:performs collect-and-downlink-observation-data
		mission:performs control-attitude
		mission:performs provide-electrical-power
		
	]
	
	// All 3 commands from the generate-system-commands specialize this command
	ci command : space:Item 
	
	//Activity 1 data
	ci sensor-control-command : space:Item [ space:specializes command ]
	ci emissions-cadob-data : space:Flow    //activity 1 data flowing in wire from outside source pin   
	
	//Activity 1 pins
	ci collect-and-downlink-observation-data-pin1 : space:InputPin  [ space:hasFlow emissions-cadob-data ]
	ci collect-and-downlink-observation-data-pin2 : space:OutputPin [ space:hasFlow downlink-data-data ] //observation data : RF
	
	//Activity 1 FUNCTION: collect-and-downlink-observation-data
	ci collect-and-downlink-observation-data : space:Function [
		mission:invokes sense-thermal-emission
		mission:invokes process-signal
		mission:invokes control-sensor
		mission:invokes generate-system-commands
		mission:invokes store-data
		mission:invokes process-downlink-data
		mission:invokes downlink-data
		
		// pins for input and output of flows or items
		space:hasInput collect-and-downlink-observation-data-pin1
		space:hasOutput collect-and-downlink-observation-data-pin2
		
		//"wires" contained in activity
		space:ownsDataFlow from-emissions-to-sense-thermal-emissions //flow "emissions" is the data, not the pin
		space:ownsDataFlow from-control-sensor-to-sense-thermal-emissions //flow
		space:ownsDataFlow from-sense-thermal-emissions-to-process-signal //flow
		space:ownsDataItem from-process-signal-to-store-data //item
		space:ownsDataItem from-store-data-to-process-downlink-data //item
		space:ownsDataItem from-generate-system-commands-to-control-sensor //item
		space:ownsDataItem from-process-downlink-data-to-donwlink-data //item
		space:ownsDataFlow from-downlink-data-to-observation-data //flow
	]
	//Activity 1 physical wires: from pin to pin
	ri from-emissions-to-sense-thermal-emissions : space:HasDataFlowTo [ 
		from collect-and-downlink-observation-data-pin1 //emissions is the data going through this wire (output from the output pin1) 
		to sense-thermal-emission-pin2 //left most
	]
	ri from-sense-thermal-emissions-to-process-signal : space:HasDataFlowTo [
		from sense-thermal-emission-pin3
		to process-signal-pin1 //left most
	]
	ri from-process-signal-to-store-data : space:HasDataItemTo [
		from process-signal-pin2
		to store-data-pin1 //left most
	]
	ri from-store-data-to-process-downlink-data : space:HasDataItemTo [
		from store-data-pin2
		to process-downlink-data-pin1 //top most
	]
	ri from-generate-system-commands-to-control-sensor : space:HasDataItemTo [
		from generate-system-commands-pin1
		to control-sensor-pin1 //right most
	]
	ri from-control-sensor-to-sense-thermal-emissions : space:HasDataFlowTo [ 
		from control-sensor-pin2 //left most
		to sense-thermal-emission-pin1 //top most 
	]
	ri from-process-downlink-data-to-donwlink-data : space:HasDataItemTo [
		from process-downlink-data-pin1
		to downlink-data-pin1 //right most
	]
	ri from-downlink-data-to-observation-data : space:HasDataItemTo [ 
		from downlink-data-pin2
		to collect-and-downlink-observation-data-pin2
	]

	//Activity 2
	ci maneuver-command : space:Item [ space:specializes command ]
	
	//Activity 2 data (in the context of control-attitude function, data flow that goes from one pin to another)
	ci solar-radiation-ca-data : space:Flow // in (solar radiation to sense sun angle) THIS IS DATA, NEEDS TO BE PUT IN A PIN FIRST THEN SENT THROUGH IT IN A WIRE   <--todo
	ci reflected-light-ca-data : space:Flow // in
	
	//Activity 2 pins
	ci control-attitude-pin1 : space:InputPin  [ space:hasFlow solar-radiation-ca-data ]
	ci control-attitude-pin2 : space:InputPin  [ space:hasFlow reflected-light-ca-data ]
	ci control-attitude-pin3 : space:OutputPin [ 										//ci torque : space:Flow //out										 <--todo
		space:hasFlow spin-up-data 
		space:hasFlow spin-down-data		
	]
	ci control-attitude-pin4 : space:OutputPin [ space:hasFlow generate-thrust-data ] 	//ci thrust : space:Flow //out										 <--todo
	
	//Activity 2 FUNCTION: control-attitude
	ci control-attitude : space:Function [
		mission:invokes generate-system-commands
		mission:invokes sense-earth-horizon-angle
		mission:invokes sense-sun-angle
		mission:invokes sense-spacecraft-angular-rate
		mission:invokes generate-reaction-wheel-spin-command
		mission:invokes generate-thruster-command
		mission:invokes spin-up
		mission:invokes spin-down
		mission:invokes sense-reaction-wheel-spin-rate
		mission:invokes generate-thrust
		
		// pins for input and output of flows or items
		space:hasInput control-attitude-pin1
		space:hasInput control-attitude-pin2
		space:hasOutput control-attitude-pin3
		space:hasOutput control-attitude-pin4
		
		//wires contained in activity
		space:ownsDataFlow from-solar-radiaton-to-sense-sun-angle //flow                                       //from-control-attitude-pin1 (solar radiation is the data itself, making exception for larger activities)
		space:ownsDataFlow from-reflected-light-to-sense-earth-horizon-angle//flow                             //same notes as above: from-solar-radiaton-to-sense-sun-angle
		space:ownsDataItem from-generate-system-commands-to-generate-reaction-wheel-spin-command //item
		space:ownsDataItem from-sense-sun-angle-to-generate-reaction-wheel-spin-command //item
		space:ownsDataItem from-sense-earth-horizon-angle-to-generate-reaction-wheel-spin-command //item
		space:ownsDataFlow from-sense-spacecraft-angular-rate-to-generate-reaction-wheel-spin-command //flow   (a rate so we might not want to loose precision) 
		space:ownsDataFlow from-sense-reaction-wheel-spin-rate-to-generate-reaction-wheel-spin-command //flow
		space:ownsDataItem from-generate-thruster-command-to-generate-thrust //item
		space:ownsDataFlow from-generate-thrust-to-thrust //flow (one of the control attitude output pin)
		//diamonds (decision branches)
		space:ownsDataItem from-generate-reaction-wheel-spin-command-to-spin-up //item since its a command      //from-generate-reaction-wheel-spin-command-to-diamond decision-branch? //item since its a command
		space:ownsDataItem from-generate-reaction-wheel-spin-command-to-spin-down  //item since its a command
		space:ownsDataFlow from-spin-up-to-torque-output   //flow  (one of the control attitude output pin)
		space:ownsDataFlow from-spin-down-to-torque-output // flow  (one of the control attitude output pin)
		
	]
	//Activity 2 physical wires
	ri from-solar-radiaton-to-sense-sun-angle : space:HasDataFlowTo [
		from control-attitude-pin1 
		to sense-sun-angle-pin1 //left most
	]
	ri from-reflected-light-to-sense-earth-horizon-angle : space:HasDataFlowTo [ 
		from control-attitude-pin2
		to sense-earth-horizon-angle-pin1 //left most
	]
	ri from-generate-system-commands-to-generate-reaction-wheel-spin-command : space:HasDataItemTo [
		from generate-system-commands-pin2 	
		to generate-reaction-wheel-spin-command-pin4 //bottom left pin
	]
	ri from-sense-sun-angle-to-generate-reaction-wheel-spin-command : space:HasDataItemTo [ 
		from sense-sun-angle-pin2
		to generate-reaction-wheel-spin-command-pin2 //top most
	]
	ri from-sense-earth-horizon-angle-to-generate-reaction-wheel-spin-command : space:HasDataItemTo [ 
		from sense-earth-horizon-angle-pin2 
		to generate-reaction-wheel-spin-command-pin3 
	]
	ri from-sense-spacecraft-angular-rate-to-generate-reaction-wheel-spin-command : space:HasDataFlowTo [ 
		from sense-spacecraft-angular-rate-pin1 
		to generate-reaction-wheel-spin-command-pin1
	]
	ri from-sense-reaction-wheel-spin-rate-to-generate-reaction-wheel-spin-command : space:HasDataFlowTo [
		from sense-reaction-wheel-spin-rate-pin2  //only exception to clockwise convention: the output pin on the left
		to generate-reaction-wheel-spin-command-pin5 
	]
	ri from-generate-thruster-command-to-generate-thrust : space:HasDataItemTo [ 
		from generate-thruster-command-pin1 
		to generate-thrust-pin1 
	]
	ri from-generate-thrust-to-thrust : space:HasDataFlowTo [ 
		from generate-thrust-pin2  //a pin
		to control-attitude-pin4
	]
	//decision branches modeled normally 
	ri from-generate-reaction-wheel-spin-command-to-spin-up : space:HasDataItemTo [
		from generate-reaction-wheel-spin-command-pin6 
		to spin-up-pin1 //bottom
	]
	ri from-generate-reaction-wheel-spin-command-to-spin-down : space:HasDataItemTo [
		from generate-reaction-wheel-spin-command-pin6 
		to spin-down-pin1 //top
	]
	ri from-spin-up-to-torque-output : space:HasDataFlowTo [
		from spin-up-pin2 
		to control-attitude-pin3 //top output torque
	]
	ri from-spin-down-to-torque-output : space:HasDataFlowTo [
		from spin-down-pin2 
		to control-attitude-pin3 //top output torque
	]
	
	//Activity 3
	ci power-command : space:Item [
		space:specializes command
	]
	ci solar-radiation-pep-data : space:Flow 
	ci electrical-power-pep-data : space:Flow
	ci provide-electrical-power-pin1 : space:InputPin [
		space:hasFlow solar-radiation-pep-data
	]
	ci provide-electrical-power-pin2 : space:InputPin [
		space:hasFlow electrical-power-pep-data
	]
	ci provide-electrical-power : space:Function [
		mission:invokes generate-system-commands
		mission:invokes generate-power
		mission:invokes store-energy
		mission:invokes manage-power
		mission:invokes condition-power
		mission:invokes distribute-power
		mission:invokes connect-power
		mission:invokes consume-power
		
		//pins
		space:hasInput provide-electrical-power-pin1
		space:hasInput provide-electrical-power-pin2
		
		//wires
		space:ownsDataFlow from-solar-radiation-input-to-generate-power //flow        //the first input with solar-radiation-data
		space:ownsDataFlow from-electrical-power-input-to-store-energy //flow         //the second input with electrical-power-data
		space:ownsDataFlow from-generate-power-to-store-energy //flow
		space:ownsDataFlow from-store-energy-to-condition-power //flow
		space:ownsDataItem from-generate-system-commands-to-manage-power //item
		space:ownsDataFlow from-manage-power-to-condition-power //flow
		space:ownsDataFlow from-manage-power-to-store-energy //flow
		space:ownsDataFlow from-condition-power-to-distribute-power //flow
		space:ownsDataFlow from-distribute-power-to-connect-power //flow
		space:ownsDataFlow from-connect-power-to-consume-power //flow
	]
	//physical wires:
	ri from-solar-radiation-input-to-generate-power : space:HasDataFlowTo [
		from provide-electrical-power-pin1 
		to generate-power-pin1 //left most
	]
	ri from-electrical-power-input-to-store-energy : space:HasDataFlowTo [
		from  provide-electrical-power-pin2
		to store-energy-pin3
	]
	ri from-generate-power-to-store-energy : space:HasDataFlowTo [
		from  generate-power-pin2
		to store-energy-pin2
	]
	ri from-store-energy-to-condition-power  : space:HasDataFlowTo [
		from  store-energy-pin4
		to condition-power-pin2
	]
	ri from-generate-system-commands-to-manage-power : space:HasDataItemTo [
		from  generate-system-commands-pin3
		to manage-power-pin1
	]
	ri from-manage-power-to-store-energy : space:HasDataFlowTo [
		from  manage-power-pin2
		to store-energy-pin1
	]
	ri from-manage-power-to-condition-power : space:HasDataFlowTo [
		from  manage-power-pin3
		to condition-power-pin1
	]
	ri from-condition-power-to-distribute-power : space:HasDataFlowTo [
		from condition-power-pin3
		to distribute-power-pin1
	]
	ri from-distribute-power-to-connect-power : space:HasDataFlowTo [
		from  distribute-power-pin2
		to connect-power-pin1
	]
	ri from-connect-power-to-consume-power : space:HasDataFlowTo [
		from  connect-power-pin2
		to consume-power-pin1
	]


	
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////// Activity 1. COLLECT AND DOWNLINK OBSERVATION DATA ///////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	// Activity 1 three subsystems: payload, avionics, communications
	ci payload-subsystem : space:Subsystem [
		base:aggregates payload-sensor 
		base:aggregates signal-processor
		base:aggregates payload-sw
	]
	ci avionics-subsystem : space:Subsystem [
		//payload-subsystem
		mission:performs generate-system-commands
		mission:performs store-data
		mission:performs process-downlink-data
		
		//control-attitude (Activity 2)
		mission:performs generate-system-commands 
		
		//provide-electrical-power (Activity 3)
		mission:performs generate-system-commands
	]
	ci communications-subsystem : space:Subsystem [
		mission:performs downlink-data
	]
	
	//Activity 1 three assemblies in payload-subsystem:
	ci payload-sensor : space:Assembly [
		mission:performs sense-thermal-emission
	]
	
	ci signal-processor : space:Assembly [
		mission:performs process-signal
	]
	
	ci payload-sw : space:Assembly [
		mission:performs control-sensor
	]

	//Activity 1  data	
	ci sense-thermal-emission-data : space:Flow
	ci process-signal-data : space:Item
	ci store-data-data : space:Item
	ci process-downlink-data-data : space:Item
	ci downlink-data-data : space:Flow
	ci control-sensor-data : space:Flow
	//this one has 3 output pins
	//ci collect-and-donwlink-observation-data-generate-system-commands-data1 : space:Item //got replaced by Specializable command space:Item
	//ci collect-and-donwlink-observation-data-generate-system-commands-data2 : space:Item //got replaced by Specializable command space:Item
	//ci collect-and-donwlink-observation-data-generate-system-commands-data3 : space:Item //got replaced by Specializable command space:Item
	
	//f1: sense-thermal-emission-pin1 
	ci sense-thermal-emission-pin1 : space:InputPin [ //left most pin in activity 1 diagram 
		space:hasFlow control-sensor-data //top: Specializable command space:Item 
	]
	ci sense-thermal-emission-pin2 : space:InputPin [ 
		space:hasFlow emissions-cadob-data 
	]
	ci sense-thermal-emission-pin3 : space:OutputPin [
		space:hasFlow sense-thermal-emission-data
	]
	ci sense-thermal-emission : space:Function [ 
		space:hasInput sense-thermal-emission-pin1 //top
		space:hasInput sense-thermal-emission-pin2 //left
		space:hasOutput sense-thermal-emission-pin3 //right
	]
	
	//f2: process-signal
	ci process-signal-pin1 : space:InputPin [
		space:hasFlow sense-thermal-emission-data
	]
	ci process-signal-pin2 : space:OutputPin  [
		space:hasItem process-signal-data
	]
	ci process-signal : space:Function [
		space:hasInput process-signal-pin1
		space:hasOutput process-signal-pin2
	]
	
	//f3: constrol-sensor
	ci control-sensor-pin1 : space:InputPin [
		space:hasItem sensor-control-command 
	]
	ci control-sensor-pin2 : space:OutputPin [ //non-conventional: pin on the left (the output pin)
		space:hasFlow control-sensor-data
	] 
	ci control-sensor : space:Function [
		space:hasInput control-sensor-pin1
		space:hasOutput control-sensor-pin2
	]
	
	// Used multiple times 
	//f4*: generate-system-commands
	ci generate-system-commands-pin1 : space:OutputPin [  //activity 1
		space:hasItem sensor-control-command
	]
	ci generate-system-commands-pin2 : space:OutputPin  [ //activity 2
		space:hasItem maneuver-command 
	]
	ci generate-system-commands-pin3 : space:OutputPin  [ //activity 3
		space:hasItem power-command
	]
	ci generate-system-commands : space:Function [
		space:hasOutput generate-system-commands-pin1  
		space:hasOutput generate-system-commands-pin2
		space:hasOutput generate-system-commands-pin3
	]
	
	//f5: store-data
	ci store-data-pin1 : space:InputPin [
		space:hasItem process-signal-data
	] 
	ci store-data-pin2 : space:OutputPin [
		space:hasItem store-data-data
	]
	ci store-data : space:Function [
		space:hasInput store-data-pin1
		space:hasOutput store-data-pin2
	]
	
	//f6: process-downlink-data
	ci process-downlink-data-pin1 : space:InputPin [
		space:hasFlow store-data-data
	]
	ci process-downlink-data-pin2 : space:OutputPin [
		space:hasItem process-downlink-data-data
	]
	ci process-downlink-data : space:Function [
		space:hasInput process-downlink-data-pin1
		space:hasOutput process-downlink-data-pin2
	]
	
	//f7: downlink-data
	ci downlink-data-pin1 : space:InputPin [
		space:hasFlow store-data-data
	]
	ci downlink-data-pin2 : space:OutputPin [
		space:hasFlow downlink-data-data 
	]
	ci downlink-data : space:Function [
		space:hasInput downlink-data-pin1
		space:hasOutput downlink-data-pin1
	]
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////// Activity 2. /CONTROL ATTITUDE///////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	//Activity 2 
	ci gnc-subsystem : space:Subsystem  [
		base:aggregates horizon-tracker
		base:aggregates sun-tracker
		base:aggregates inertial-measurement-unit
		base:aggregates gnc-sw
		base:aggregates reaction-wheel
	]

	//Activity 2 assemblies
	ci horizon-tracker : space:Assembly [
		mission:performs sense-earth-horizon-angle
	]
	ci sun-tracker : space:Assembly [
		mission:performs sense-sun-angle
	]
	ci inertial-measurement-unit : space:Assembly [
		mission:performs sense-spacecraft-angular-rate
	]
	ci gnc-sw : space:Assembly [
		mission:performs generate-reaction-wheel-spin-command
		mission:performs generate-thruster-command
	]
	ci reaction-wheel : space:Assembly [
		mission:performs spin-up
		mission:performs spin-down
		mission:performs sense-reaction-wheel-spin-rate
	]
	ci propulsion-subsystem [
		mission:performs generate-thrust	
	]

	//Activity 2 data
	ci control-attitude-generate-system-commands-data1 : space:Item
	ci control-attitude-generate-system-commands-data2 : space:Item
	ci control-attitude-generate-system-commands-data3 : space:Item
	ci sense-earth-horizon-data : space:Item
	ci sense-sun-angle-data : space:Item
	ci sense-spacecraft-angular-rate-data : space:Flow
	ci generate-reaction-wheel-spin-command-data : space:Item
	ci generate-thruster-command-data : space:Item
	ci spin-up-data : space:Flow 
	ci spin-down-data : space:Flow 
	ci sense-reaction-wheel-spin-rate-data : space:Flow
	ci generate-thrust-data : space:Flow
	
	//Activity 2 data functions
	
	//f2: sense-earth-horizon-angle
	ci sense-earth-horizon-angle-pin1 : space:InputPin [
		space:hasFlow reflected-light-ca-data
	]
	ci sense-earth-horizon-angle-pin2 : space:OutputPin [
		space:hasItem sense-earth-horizon-data
	]
	ci sense-earth-horizon-angle : space:Function [
		space:hasInput sense-earth-horizon-angle-pin1
		space:hasOutput sense-earth-horizon-angle-pin2
	]
	
	//f3: sense-sun-angle
	ci sense-sun-angle-pin1 : space:InputPin [
		space:hasFlow solar-radiation-ca-data
	]
	ci sense-sun-angle-pin2 : space:OutputPin [
		space:hasItem sense-sun-angle-data
	]
	ci sense-sun-angle : space:Function [//question/todo/check: (NO) shoule angle be a fucntion of sense-sun
		space:hasInput sense-sun-angle-pin1
		space:hasOutput sense-sun-angle-pin2
	]
	
	//f4: sense-spacecraft-angulare-rate
	ci sense-spacecraft-angular-rate-pin1 : space:OutputPin [
		space:hasItem sense-spacecraft-angular-rate-data
	]
	ci sense-spacecraft-angular-rate : space:Function [
		space:hasOutput sense-spacecraft-angular-rate-pin1
	]
	
	//f5: generate-reaction-wheel-spin-command
	ci generate-reaction-wheel-spin-command-pin1 : space:InputPin [//from sense-spacecraft-angular-rate
		space:hasItem sense-spacecraft-angular-rate-data
	]
	ci generate-reaction-wheel-spin-command-pin2 : space:InputPin [ //from sense-sun-angle
		space:hasItem sense-sun-angle-data
	]
	ci generate-reaction-wheel-spin-command-pin3 : space:InputPin [ //from sense-earth-horizon-angle
		space:hasItem sense-earth-horizon-data
	]
	ci generate-reaction-wheel-spin-command-pin4 : space:InputPin [ //from generate-system-command-data3 (pin3?)
		space:hasItem maneuver-command
	]
	ci generate-reaction-wheel-spin-command-pin5 : space:InputPin [ //goes to the diamond "pin" or interface
		space:hasFlow sense-reaction-wheel-spin-rate-data
	]
	ci generate-reaction-wheel-spin-command-pin6 : space:OutputPin [ 
		space:hasItem generate-reaction-wheel-spin-command-data
	]
	ci generate-reaction-wheel-spin-command : space:Function [
		space:hasInput generate-reaction-wheel-spin-command-pin1
		space:hasInput generate-reaction-wheel-spin-command-pin2
		space:hasInput generate-reaction-wheel-spin-command-pin3
		space:hasInput generate-reaction-wheel-spin-command-pin4
		space:hasOutput generate-reaction-wheel-spin-command-pin5
		space:hasInput generate-reaction-wheel-spin-command-pin6
	]
	
	//f6: generate-thruster-command-pin1
	ci generate-thruster-command-pin1 : space:OutputPin[
		space:hasItem generate-thruster-command-data
	]
	ci generate-thruster-command : space:Function [
		space:hasOutput generate-thruster-command-pin1
	]
	
	//f7
	ci spin-up-pin1 : space:InputPin [
		space:hasItem generate-reaction-wheel-spin-command-data
	]
	ci spin-up-pin2 : space:OutputPin [
		space:hasFlow spin-up-data
	]
	ci spin-up : space:Function [
		space:hasInput spin-up-pin1
		space:hasOutput spin-up-pin2
	]
	
	//f8
	ci spin-down-pin1 : space:InputPin [
		space:hasItem generate-reaction-wheel-spin-command-data
	]
	ci spin-down-pin2 : space:OutputPin[
		space:hasFlow spin-down-data
	]
	ci spin-down : space:Function [
		space:hasInput spin-down-pin1
		space:hasOutput spin-down-pin2
	]
	
	//f9
	ci sense-reaction-wheel-spin-rate-pin1 : space:InputPin [
		//no input
	]
	ci sense-reaction-wheel-spin-rate-pin2 : space:OutputPin [
		space:hasFlow sense-reaction-wheel-spin-rate-data
	]
	ci sense-reaction-wheel-spin-rate : space:Function [
		space:hasInput sense-reaction-wheel-spin-rate-pin1  
		space:hasOutput sense-reaction-wheel-spin-rate-pin2
	]
	
	//f10
	ci generate-thrust-pin1 : space:InputPin [
		space:hasItem generate-thruster-command-data
	]
	ci generate-thrust-pin2 : space:OutputPin [
		space:hasFlow generate-thrust-data
	]
	ci generate-thrust : space:Function [
		space:hasInput generate-thrust-pin1  
		space:hasOutput generate-thrust-pin1
	]
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////// Activity 3. PROVIDE ELECTRICAL POWER///////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	//Activity 3 subsystems
	// avionics-subsystem already declared above as part of the Collect And Downlink Observation Data
	ci power-subsystem : space:Subsystem [
		base:aggregates solar-array
		base:aggregates battery
		base:aggregates power-mgmt-sw
		base:aggregates power-conditioner
		base:aggregates power-distribution
	]
	
	//Activity 3 assemblies
	ci solar-array : space:Assembly [
		mission:performs generate-power
	]	
	ci battery : space:Assembly [
		mission:performs store-energy
	]	
	ci power-mgmt-sw : space:Assembly [
		mission:performs manage-power
	]	
	ci power-conditioner : space:Assembly [
		mission:performs condition-power
	]	
	ci power-distribution : space:Assembly [
		mission:performs distribute-power
	]	
	ci power-harness : space:Subsystem [
		mission:performs connect-power
	]	
	ci subsystem : space:Subsystem [//question: will the same name cause an issue with confusion in the future? 
		mission:performs consume-power
	]
	
	// Activity 3 data
	ci provide-electrical-power-generate-system-commands-data1 : space:Item //activity input 
	ci provide-electrical-power-generate-system-commands-data2 : space:Item //activity input 
	ci provide-electrical-power-generate-system-commands-data3 : space:Item //activity output 
	ci generate-power-data : space:Flow
	ci store-energy-data : space:Flow
	ci manage-power-data1 : space:Flow
	ci manage-power-data2 : space:Flow
	ci condition-power-data : space:Flow
	ci distribute-power-data : space:Flow
	ci connect-power-data : space:Flow 
	//ci consume-power-data (no output in pin, presumably power gets consumed)
	
	//Activity 3 functions
	//f1: generate-system-commands (already defines in activity 1)
	
	//f2: generate-power
	ci generate-power-pin1 : space:InputPin [
		space:hasFlow solar-radiation-pep-data
	]
	ci generate-power-pin2 : space:OutputPin [
		space:hasFlow generate-power-data
	]
	ci generate-power : space:Function [
		space:hasInput generate-power-pin1  
		space:hasOutput generate-power-pin2
	]
	
	//f3
	ci store-energy-pin1 : space:InputPin [
		space:hasFlow manage-power-data1	
	]
	ci store-energy-pin2 : space:InputPin [
		space:hasFlow generate-power-data
	]
	ci store-energy-pin3 : space:InputPin [
		space:hasFlow electrical-power-pep-data
	]
	ci store-energy-pin4 : space:OutputPin [
		space:hasFlow store-energy-data
	]
	ci store-energy : space:Function [
		space:hasInput store-energy-pin1  
		space:hasInput store-energy-pin2
		space:hasInput store-energy-pin3  
		space:hasOutput store-energy-pin4
	]
	
	//f4
	ci manage-power-pin1 : space:InputPin [
		space:hasItem power-command //receiving command
	]
	ci manage-power-pin2 : space:OutputPin [
		space:hasFlow manage-power-data1
	]
	ci manage-power-pin3 : space:OutputPin [
		space:hasFlow manage-power-data2 //top 
	]
	ci manage-power : space:Function [
		space:hasInput manage-power-pin1  
		space:hasOutput manage-power-pin2
		space:hasOutput manage-power-pin3
	]
	
	//f5
	ci condition-power-pin1 : space:InputPin [
		space:hasFlow manage-power-data2 
	]
	ci condition-power-pin2 : space:InputPin [
		space:hasFlow store-energy-data
	]
	ci condition-power-pin3 : space:OutputPin [
		space:hasFlow condition-power-data
	]
	ci condition-power : space:Function [
		space:hasInput condition-power-pin1  
		space:hasInput condition-power-pin2
		space:hasOutput condition-power-pin3
	]
	
	//f6
	ci distribute-power-pin1 : space:InputPin [
		space:hasFlow condition-power-data
	]
	ci distribute-power-pin2 : space:OutputPin [
		space:hasFlow distribute-power-data
	]
	ci distribute-power : space:Function [
		space:hasInput distribute-power-pin1
		space:hasOutput distribute-power-pin2
	]
	
	//f7
	ci connect-power-pin1 : space:InputPin [
		space:hasFlow distribute-power-data
	]
	ci connect-power-pin2 : space:OutputPin [
		space:hasFlow connect-power-data
	]
	ci connect-power : space:Function [
		space:hasInput connect-power-pin1
		space:hasOutput connect-power-pin2
	]
	
	//f8
	ci consume-power-pin1 : space:InputPin [
		space:hasFlow connect-power-data
	]
	ci consume-power : space:Function [
		space:hasInput consume-power-pin1
	]
	
	
	
}