description <http://opencaesar.io/examples/firesat_fun/descriptions/firesat#> as firesat {
	uses <http://opencaesar.io/examples/firesat_fun/vocabularies/space#> as space
	uses <http://imce.jpl.nasa.gov/foundation/base#> as base
	uses <http://imce.jpl.nasa.gov/foundation/mission#> as mission
	//extends <http://opencaesar.io/examples/firesat_fun/descriptions/pins#> as pins
	//extends <http://opencaesar.io/examples/firesat_fun/descriptions/assembly-functions#> as assembly-functions
	extends <http://opencaesar.io/examples/firesat_fun/descriptions/assembly#> as assembly
	extends <http://opencaesar.io/examples/firesat_fun/descriptions/activity-functions#> as activity-functions
	extends <http://opencaesar.io/examples/firesat_fun/descriptions/subsystem#> as subsystem
	//extends <http://opencaesar.io/examples/firesat_fun/descriptions/data#> as data
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////Created a fireSAT specific-instance of space craft (name firesat)://////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	//todo
	//emissions is collect-and-downlink-data (the input) NEED TO CHAGNE TO CONVETIONAL (WAIT, I HAVE TO GUESS GOOD NAMES FOR THEM 

	//Notes:
	//Relationship between spacecraft and subsystem.
	//To define input and output pins use hasInput and hasOutput to relate func to pin
	//relation instance: with a capital H: space:HasDataFlowTo  this makes it solid
	//Instance of subsystem is declared by adding " : space:Subsystem" after the concept instance (ci)
	//To add relations to the system:
		//Aggregate assemblies to the subsystem. This communicates relation between subsystems, 
		//which are like sub components. This is a logical composition, not physical, 
		//it is what they are contained in.
		//Square brackets represent links, for example payload subsystem consisting of assemblies
		//Round rectangle functions inside assemblies
	//A component performs function (functions are the round rectangles and the larger activities)
	//refi (to make it real, an object, instead of just a relationship, represented by an object)
	//wire //relation instance: with a capital H: space:HasDataFlowTo  this makes it solid
	//A function has pins, each pin can have a type
	//if you connect 2 pins, the types have to be the same or a subclass of the pin
	
	ci firesat : space:Spacecraft [
		//collect and down-link observation data assemblies (physical only)
		base:contains assembly:payload-sensor
		base:contains assembly:signal-processor
		base:contains assembly:payload-sw
		
		//control attitude assemblies (physical only)
		base:contains assembly:horizon-tracker
		base:contains assembly:sun-tracker
		base:contains assembly:inertial-measurement-unit
		base:contains assembly:gnc-sw
		base:contains assembly:reaction-wheel
	
		//provide electrical power assemblies (physical only)
		base:contains assembly:solar-array
		base:contains assembly:battery
		base:contains assembly:power-mgmt-sw
		base:contains assembly:power-conditioner
		base:contains assembly:power-distribution
		
		//subsystems
		base:contains subsystem:payload-subsystem
		
		// under payload-sensor
		mission:performs activity-functions:collect-and-downlink-observation-data
		mission:performs activity-functions:control-attitude
		mission:performs activity-functions:provide-electrical-power
		
	]
	
}